class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lec(self, lecturer, course, rate):
        if isinstance(lecturer,
                      Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress:
            if course in lecturer.rate:
                lecturer.rate[course] += [rate]
            else:
                lecturer.rate[course] = [rate]
        else:
            return 'Ошибка'

    def avg_grade(self):
        average_grade = {}
        avg_grade_total = float()
        for course in self.grades:
            average_grade.setdefault(course, 0)
            for grade in self.grades[course]:
                average_grade[course] += grade
        for course in average_grade:
            average_grade[course] = average_grade[course] / len(self.grades[course])
            avg_grade_total += average_grade[course]
        if avg_grade_total == 0:
            return 0
        else:
            avg_grade_total = avg_grade_total / len(average_grade)
            return avg_grade_total

    def __str__(self):
        total = 0
        for grade in self.grades.values():
            total += grade[0]
        return f'\nИмя: {self.name} \nФамилия: {self.surname} \nСредняя оценка за дошние задания: {str(round(total / len(self.grades), 1))} \nКурсы в процессе обучения: {str(self.courses_in_progress)} \nЗавершенные курсы: {str(*self.finished_courses)}'

    def __lt__(self, other):
        if isinstance(other, Student):
            res = self.avg_grade() < other.avg_grade()
            if res == True:
                print(f'Средние оценки у студента {self.name} {self.surname} ниже чем у {other.name} {other.surname}')
            else:
                print(f'Средние оценки у студента{self.name} {self.surname} не ниже чем у {other.name} {other.surname}')
        else:
            print(f'{other.name} {other.surname} не является студентом!')

    def __gt__(self, other):
        if isinstance(other, Student):
            res = self.avg_grade() > other.avg_grade()
            if res == True:
                print(f'Средние оценки у студента{self.name} {self.surname} выше чем у {other.name} {other.surname}')
            else:
                print(f'Средние оценки у студента {self.name} {self.surname} не выше чем у {other.name} {other.surname}')
        else:
            print(f'{other.name} {other.surname} не является студентом!')

    def __eq__(self, other):
        if isinstance(other, Student):
            res = self.avg_grade() > other.avg_grade()
            if res == True:
                print(f'Средние оценки у студентов {self.name} {self.surname} и {other.name} {other.surname} равны')
            else:
                print(f'Средние оценки у стдентов {self.name} {self.surname} и {other.name} {other.surname} НЕ РАВНЫ')
        else:
            print(f'{other.name} {other.surname} не является студентом!')

    def __ne__(self, other):
        if isinstance(other, Student):
            res = self.avg_grade() > other.avg_grade()
            if res == True:
                print(f'Средние оценки у студентов {self.name} {self.surname} и {other.name} {other.surname} не равны')
            else:
                print(f'Средние оценки у студентов{self.name} {self.surname} и {other.name} {other.surname} РАВНЫ')
        else:
            print(f'{other.name} {other.surname} не является студентом!')


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Lecturer(Mentor):
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
        self.rate = {}

    def __str__(self):
        total = 0
        for grade in self.rate.values():
            total = sum(grade)
        return f'\nИмя: {self.name} \nФамилия: {self.surname} \nСредняя оценка за лекции: {str(round(total / len(grade), 1))}'

    def avg_rate(self):
        average_rate = {}
        avg_rate_total = float()
        for course in self.rate:
            average_rate.setdefault(course, 0)
            for rate in self.rate[course]:
                average_rate[course] += rate
        for course in average_rate:
            average_rate[course] = average_rate[course] / len(self.rate[course])
            avg_rate_total += average_rate[course]
        if avg_rate_total == 0:
            return 0
        else:
            avg_rate_total = avg_rate_total / len(average_rate)
            return avg_rate_total

    def __lt__(self, other):
        if isinstance(other, Lecturer):
            res = self.avg_rate() < other.avg_rate()
            if res == True:
                print(f'Средние оценки {self.name} {self.surname} ниже чем у {other.name} {other.surname}')
            else:
                print(f'Средние оценки {self.name} {self.surname} не ниже чем у {other.name} {other.surname}')
        else:
            print(f'{other.name} {other.surname} не является лектором!')

    def __gt__(self, other):
        if isinstance(other, Lecturer):
            res = self.avg_rate() > other.avg_rate()
            if res == True:
                print(f'Средняя оценка у лектора {self.name} {self.surname} выше чем у {other.name} {other.surname}')
            else:
                print(f'Средняя оценка у лектора {self.name} {self.surname} не выше чем у {other.name} {other.surname}')
        else:
            print(f'{other.name} {other.surname} не является лектором!')


    def __eq__(self,other):
        if isinstance(other, Lecturer):
            res = self.avg_rate() == other.avg_rate()
            if res == True:
                print(f'Средняя оценка у лекторов {self.name} {self.surname} и {other.name} {other.surname} равны')
            else:
                print(f'Средняя оценка у лекторов {self.name} {self.surname} и {other.name} {other.surname} НЕ равны')
        else:
            print(f'{other.name} {other.surname} не является лектором!')

    def __ne__(self, other):
        if isinstance(other, Lecturer):
            res = self.avg_rate() != other.avg_rate()
            if res == True:
                print(f'Средняя оценка у лекторов {self.name} {self.surname} и {other.name} {other.surname} не равны')
            else:
                print(f'Средняя оценка у лекторов {self.name} {self.surname} и {other.name} {other.surname} РАВНЫ')
        else:
            print(f'{other.name} {other.surname} не является лектором!')

class Reviewer(Mentor):
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        return f'\nИмя: {self.name} \nФамилия: {self.surname}'


def get_avg_students(stud_list, course):
    '''Средняя оценка у студентов по курсу. Принимает в аргументы список студентов и название курса'''
    grade_list = list()
    grade_avg = int()
    grade_total = int()
    for student in stud_list:
        if course in student.courses_in_progress:
            for name, grade in student.grades.items():
                if name == course:
                    for value in grade:
                        grade_avg += value
            grade_list.append(grade_avg / len(student.grades[course]))
            grade_avg = 0
    for grades in grade_list:
        grade_total += grades
    print(f'Средняя оценка студентов на курсе {course}: {round(grade_total / len(grade_list), 1)}')


def get_avg_lecturers(lec_list, course):
    '''Средняя оценка лекторов по курсу. Принимает в аругменты список '''
    grade_list = list()
    grade_avg = int()
    grade_total = int()
    for lecturer in lec_list:
        if course in lecturer.courses_attached:
            for name, grade in lecturer.rate.items():
                if name == course:
                    for value in grade:
                        grade_avg += value
            grade_list.append(grade_avg / len(lecturer.rate[course]))
            grade_avg = 0
    for grades in grade_list:
        grade_total += grades
    print(f'Средняя оценка лекторов на курсе {course}: {round(grade_total / len(grade_list), 1)}')


best_student = Student('Ruoy', 'Eman', 'your_gender')
student1 = Student('Leroy', 'Jenkins', 'your_gender')
student2 = Student('Beatle', 'Juice', 'your_gender')
student1.courses_in_progress += ['Python', 'Git', 'PyDev']
student2.courses_in_progress += ['Python', 'Git', 'PyDev']
best_student.courses_in_progress += ['Python', 'Git', 'PyDev']
student1.finished_courses += ['Компьютерная грамотность']
student2.finished_courses += ['Английский для программистов']
best_student.finished_courses += ['Введение в програмирование']

cool_reviewer = Reviewer('Some', 'Buddy')
cool_reviewer.courses_attached += ['Python', 'Git', 'PyDev']
cool_reviewer.rate_hw(best_student, 'Python', 10)
cool_reviewer.rate_hw(best_student, 'Python', 9)
cool_reviewer.rate_hw(best_student, 'Python', 9)
cool_reviewer.rate_hw(best_student, 'Git', 9)
cool_reviewer.rate_hw(best_student, 'PyDev', 10)
cool_reviewer.rate_hw(student1, 'Python', 8)
cool_reviewer.rate_hw(student1, 'Git', 8)
cool_reviewer.rate_hw(student1, 'PyDev', 9)
cool_reviewer.rate_hw(student2, 'Python', 7)
cool_reviewer.rate_hw(student2, 'Git', 10)
cool_reviewer.rate_hw(student2, 'PyDev', 9)

lecturer = Lecturer('Chad', 'Giga')
cool_lecturer = Lecturer('Onotole', 'Vasserman')
tought_lecturer = Lecturer('Harold', 'Hide-The-Pain')
lecturer.courses_attached += ['PyDev']
cool_lecturer.courses_attached += ['Git']
tought_lecturer.courses_attached += ['Python']

best_student.rate_lec(lecturer, 'PyDev', 10)
best_student.rate_lec(cool_lecturer, 'Git', 10)
best_student.rate_lec(tought_lecturer, 'Python', 10)
student1.rate_lec(lecturer, 'PyDev', 9)
student1.rate_lec(cool_lecturer, 'Git', 10)
student1.rate_lec(tought_lecturer, 'Python', 8)
student2.rate_lec(lecturer, 'PyDev', 8)
student2.rate_lec(cool_lecturer, 'Git', 7)
student2.rate_lec(tought_lecturer, 'Python', 10)

print(best_student)
print(student1)
print(student2)
print(lecturer)
print(cool_lecturer)
print(tought_lecturer)
print(cool_reviewer)
print(get_avg_students([best_student, student1, student2], 'PyDev'))
print(get_avg_lecturers([cool_lecturer, tought_lecturer, lecturer], 'Git'))
print(student1.__lt__(best_student))
print(student1.__gt__(best_student))
print(student1.__eq__(best_student))
print(student1.__ne__(best_student))
print(lecturer.__eq__(tought_lecturer))
print(lecturer.__ne__(cool_lecturer))
print(cool_lecturer.__lt__(tought_lecturer))
print(lecturer.__gt__(tought_lecturer))
print(lecturer.__lt__(best_student))
