class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
    def rate_lec(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress:
            if course in lecturer.rate:
                lecturer.rate[course] += [grade]
            else:
                lecturer.rate[course] = [grade]
        else:
            return 'Ошибка'
    def __str__(self):
        total = 0
        for grade in self.grades.values():
            total += grade[0]
        return '\nИмя: '+self.name+' \nФамилия: '+self.surname+' \nСредняя оценка за дошние задания: '+str(round(total/len(self.grades), 1))+' \nКурсы в процессе обучения: '+str(self.courses_in_progress)+' \nЗавершенные курсы: '+str(*self.finished_courses)+''


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

class Lecturer(Mentor):
    def __init__(self,name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
        self.rate = {}
    def __str__(self):
        total = 0
        for grade in self.rate.values():
            total = sum(grade)
        return '\nИмя: '+self.name+' \nФамилия: '+self.surname+' \nСредняя оценка за лекции: '+str(round(total/len(grade), 1))+''
    def mid_rate(self):
        for grade in self.rate.values():
            total = sum(grade)
        md_rate = round(total/len(grade), 1)
        return int(md_rate)
class Reviewer(Mentor):
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'
    def __str__(self):
        return '\nИмя: '+self.name+' \nФамилия: '+self.surname+''
    def mid_rate(self, students, course):
        self.students = []
        self.course = []
        total = 0
        if isinstance(students, Student) and course in students.courses_in_progress:
            if course in students.grades:
                for md_grade in students.grades.values():
                    total += md_grade[0]
                return total/len(students)
                print(total/len(students))







best_student = Student('Ruoy', 'Eman', 'your_gender')
student1 = Student('Leroy', 'Jenkins', 'your_gender')
student2 = Student('Beatle', 'Juice', 'your_gender')
student1.courses_in_progress += ['Python', 'Git', 'PyDev']
student2.courses_in_progress += ['Python', 'Git', 'PyDev']
best_student.courses_in_progress += ['Python', 'Git', 'PyDev']
student1.finished_courses += ['Компьютерная грамотность']
student2.finished_courses += ['Английский для программистов']
best_student.finished_courses += ['Введение в програмирование']

cool_reviewer = Reviewer('Some', 'Buddy')
cool_reviewer.courses_attached += ['Python', 'Git', 'PyDev']
cool_reviewer.rate_hw(best_student, 'Python', 10)
cool_reviewer.rate_hw(best_student, 'Git', 9)
cool_reviewer.rate_hw(best_student, 'PyDev', 10)
cool_reviewer.rate_hw(student1, 'Python', 8)
cool_reviewer.rate_hw(student1, 'Git', 8)
cool_reviewer.rate_hw(student1, 'PyDev', 9)
cool_reviewer.rate_hw(student2,'Python', 7)
cool_reviewer.rate_hw(student2, 'Git', 10)
cool_reviewer.rate_hw(student2, 'PyDev', 9)

lecturer = Lecturer('Chad', 'Giga')
cool_lecturer = Lecturer('Onotole', 'Vasserman')
tought_lacturer = Lecturer('Harold', 'Hide-The-Pain')
lecturer.courses_attached += ['PyDev']
cool_lecturer.courses_attached += ['Git']
tought_lacturer.courses_attached += ['Python']

best_student.rate_lec(lecturer, 'PyDev', 10)
best_student.rate_lec(cool_lecturer, 'Git', 10)
best_student.rate_lec(tought_lacturer, 'Python', 10)
student1.rate_lec(lecturer, 'PyDev', 9)
student1.rate_lec(cool_lecturer, 'Git', 10)
student1.rate_lec(tought_lacturer, 'Python', 8)
student2.rate_lec(lecturer, 'PyDev', 8)
student2.rate_lec(cool_lecturer, 'Git', 7)
student2.rate_lec(tought_lacturer, 'Python', 10)
cool_reviewer.mid_rate([student2, student1, best_student], 'PyDev')

print(best_student)
print(student1)
print(student2)
print(lecturer)
print(cool_lecturer)
print(tought_lacturer)
print(cool_reviewer)






